<style>
    .centered-flex {
        display: flex;
        align-items: center;
        position: relative; /* Needed for absolute positioning of the animation */
        justify-content: flex-start;
        flex-direction: row
    }
    .animation-container {
        position: relative;
        right: 0;
        top: 50%;
        transform: translateY(-20%);
    }
    @keyframes drawCircle {
        to {
            stroke-dashoffset: 0;
        }
    }

    /* Placeholder fill animation with immediate execution but will be replaced */
    @keyframes fillColor {
        100% { fill: currentColor; }
    }

    .circle-bg {
        fill: transparent;
        stroke: white;
        stroke-width: 6;
        stroke-dasharray: 290; /* Approximately 2 * Math.PI * 45 */
        stroke-dashoffset: 282;
        animation: drawCircle 1s linear forwards;
    }

    .number-text {
        font-size: 2rem;
        text-anchor: middle;
        alignment-baseline: central;
        fill: white;
        font-weight: 800;
    }

    .col-md-4 {
        max-width: 300px;
        align-self: flex-start;
    }

    .star {
        font-size: 24px;
        text-anchor: middle;
        alignment-baseline: middle;
        fill: gold;
    }

    .text {

    align-self: flex-start;

  }

  .backup-text {
    display: none;
  }

  @media (max-width: 768px) { /* breakpoint at 768px */
    .text {
      flex-basis: 100%; /* makes the text take up the full width below this breakpoint */
    }
  }

  @media (max-width: 700px) { /* breakpoint at 768px */
    .text {
      display: none; /* makes the text take up the full width below this breakpoint */
    }
    .backup-text {
      display: block;
    }
    .centered-flex {
      justify-content: center;
    }
  }

    {% assign img_path = "/assets/img/blog/album/" + include.image %}
</style>
<div class="centered-flex" style="">
  <!-- Image container -->
  <div class="col-md-4" style="padding-left: 0px !important">
    {% if include.explicit or include.link == blank %}
    {% else %}
      <a href="{{ include.link }}" target="_blank">
    {% endif %}
    {% include figure.liquid path=include.image title=include.title explicit=include.explicit class="img-fluid rounded z-depth-1" book=true %}
    {% if include.explicit or include.link == blank %}
    {% else %}
      </a>
    {% endif %}

    <div class="caption">
      <strong>{{ include.title }}</strong><br>
      <em>{{ include.artist }}</em>
    </div>
  </div>
  <!-- Animation container -->
  {% if include.score %}
    <div class="animation-container">
      <svg viewBox="0 0 120 120" width="120" height="120" id="circleSvg">
        <circle class="circle-bg" cx="60" cy="60" r="45" id="circleBg"/>
        <text x="60" y="60" class="number-text" id="numberText">{{ include.score }}</text>
      </svg>
    </div>
  {% endif %}
  <div class="text">
    {{ include.content | markdownify }}
  </div>
</div>
<div class="backup-text">
  {{ include.content | markdownify }}
</div>

<script>
  {% if include.explicit %}

  document.addEventListener('DOMContentLoaded', function() {
      const image = document.getElementById('blurImage');

      image.addEventListener('click', function() {
          // Check if the image currently has a blur effect
          if (image.style.filter === 'blur(6px)') {
              image.style.filter = 'none'; // Remove the blur effect
          } else {
              image.style.filter = 'blur(6px)'; // Apply the blur effect
          }
      });
  });
  {% endif %}

      function determineColor(value) {
          if (value >= 0 && value < 3) return 'red';
          else if (value >= 3 && value < 6) return 'var(--global-album-tier-bad)';
          else if (value >= 6 && value < 7) return 'var(--global-album-tier-mid)';
          else if (value >= 7 && value < 8) return 'var(--global-album-tier-good)';
          else if (value >= 8 && value < 9) return 'var(--global-album-tier-great)';
          else if (value >= 9 && value < 10) return 'var(--global-album-tier-amazing)';
          else if (value == 10) return 'var(--global-album-tier-perfect)';
          return 'var(--global-theme-color)'; // Default if out of range
      }

      function animateCircleFill() {
          const number = parseFloat(document.getElementById('numberText').textContent);
          const color = determineColor(number);
          const circle = document.getElementById('circleBg');
          const n = document.getElementById('numberText');

          // Apply the color determined by the number's value
          circle.style.stroke = color;
          n.style.fill = color;

          // Use JavaScript to add fill animation after stroke animation completes
      }

      animateCircleFill()
      // Delay the fill animation until after the stroke animation completes
</script>
